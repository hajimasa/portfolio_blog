---
import '../../styles/global.css';
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

//microCMS呼び出し
import { getBlogs } from "../../library/microcms";

export async function getStaticPaths({ paginate }: any) {
  // 全記事を取得
  const response = await getBlogs({ fields: ["id", "title", "publishedAt", "thumbnail"] });
  
  // 6件ごとにページネーション
  return paginate(response.contents, { pageSize: 6 });
}

const { page } = Astro.props;
---

<style>
  .tooltip {
    position: absolute;
    top: 20px;
    right: 20px;
    background-color: #39FF14;
    color: black;
    font-weight: bold;
    padding: 5px 12px;
    border: 2px solid black;
    border-radius: 12px;
    opacity: 0;
    transform: translateY(-10px) rotate(3deg);
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    z-index: 10;
    font-size: 14px;
    box-shadow: 3px 3px 0 rgba(0,0,0,0.8);
    pointer-events: none;
    letter-spacing: 0.5px;
  }

  /* 吹き出しの矢印部分 */
  .tooltip:after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -8px;
    border-width: 8px;
    border-style: solid;
    border-color: black transparent transparent transparent;
  }

  .tooltip:before {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -6px;
    border-width: 6px;
    border-style: solid;
    border-color: #39FF14 transparent transparent transparent;
    z-index: 1;
  }

  .group:hover .tooltip {
    opacity: 1;
    transform: translateY(0) rotate(0);
    box-shadow: 4px 4px 0 rgba(0,0,0,0.5);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 12px;
    margin: 40px 0;
  }

  .pagination a, .pagination span {
    padding: 8px 16px;
    border: 2px solid black;
    text-decoration: none;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .pagination a {
    background-color: white;
    color: black;
  }

  .pagination a:hover {
    background-color: #39FF14;
    transform: translateY(-2px);
    box-shadow: 3px 3px 0 rgba(0,0,0,0.3);
  }

  .pagination .current {
    background-color: black;
    color: white;
  }

  .pagination .disabled {
    background-color: #f5f5f5;
    color: #ccc;
    border-color: #ddd;
    cursor: not-allowed;
  }
</style>

<!DOCTYPE html>
<html lang="ja">
	<head>
		<BaseHead title={`${SITE_TITLE} - Page ${page.currentPage}`} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<section class="body-font overflow-hidden">
			<div class="px-0w-full">
			  <div class="grid grid-cols-1 md:grid-cols-3 gap-0 w-full">
				{
					page.data.map((content: any, index: number) => (
						<a href={`/${content.id}/`} class="relative block bg-white overflow-hidden transition duration-300 border-2 border-black hover:border-gray-800 group">
							<div class="tooltip">CHECK!</div>
							<div class="w-full h-64 bg-white">
								<img src={content.thumbnail.url} alt={content.title} class="w-full h-full object-contain" />
							</div>
							<div class="p-6">
								<h2 class="text-xl font-bold mb-3 line-clamp-2 group-hover:text-gray-800 transition-colors">{content.title}</h2>
								<div class="flex items-center text-sm text-gray-600 mb-3">
									<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
									</svg>
									<FormattedDate date={new Date(content.publishedAt)} />
								</div>
								<div class="absolute bottom-0 right-0">
									<div class="w-0 h-0 border-t-[30px] border-t-transparent border-r-[30px] border-r-black group-hover:border-r-gray-800 transition-colors"></div>
								</div>
							</div>
						</a>
					))
				}
			  </div>
			</div>
			
			<!-- ページネーション -->
			<div class="pagination">
				{page.url.prev ? (
					<a href={page.url.prev}>← 前へ</a>
				) : (
					<span class="disabled">← 前へ</span>
				)}
				
				{Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
					pageNum === page.currentPage ? (
						<span class="current">{pageNum}</span>
					) : (
						<a href={pageNum === 1 ? "/" : `/page/${pageNum}`}>{pageNum}</a>
					)
				))}
				
				{page.url.next ? (
					<a href={page.url.next}>次へ →</a>
				) : (
					<span class="disabled">次へ →</span>
				)}
			</div>
		</section>
		<Footer />
	</body>
</html>